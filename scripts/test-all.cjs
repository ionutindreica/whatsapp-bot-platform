#!/usr/bin/env node

const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
}

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`)
}

function runCommand(command, description) {
  log(`\n${colors.cyan}▶ ${description}${colors.reset}`)
  log(`${colors.yellow}Running: ${command}${colors.reset}`)
  
  try {
    const output = execSync(command, { 
      stdio: 'inherit',
      cwd: process.cwd()
    })
    log(`${colors.green}✅ ${description} completed successfully${colors.reset}`)
    return true
  } catch (error) {
    log(`${colors.red}❌ ${description} failed${colors.reset}`)
    log(`${colors.red}Error: ${error.message}${colors.reset}`)
    return false
  }
}

function checkFileExists(filePath) {
  return fs.existsSync(path.join(process.cwd(), filePath))
}

function generateTestReport(results) {
  const reportPath = path.join(process.cwd(), 'test-results', 'test-summary.md')
  
  // Ensure test-results directory exists
  const testResultsDir = path.dirname(reportPath)
  if (!fs.existsSync(testResultsDir)) {
    fs.mkdirSync(testResultsDir, { recursive: true })
  }

  const timestamp = new Date().toISOString()
  const report = `# Test Execution Summary

**Generated:** ${timestamp}

## Test Results

| Test Type | Status | Duration | Coverage |
|-----------|--------|----------|----------|
${results.map(result => `| ${result.name} | ${result.status ? '✅ PASSED' : '❌ FAILED'} | ${result.duration}ms | ${result.coverage || 'N/A'} |`).join('\n')}

## Summary

- **Total Tests:** ${results.length}
- **Passed:** ${results.filter(r => r.status).length}
- **Failed:** ${results.filter(r => !r.status).length}
- **Success Rate:** ${Math.round((results.filter(r => r.status).length / results.length) * 100)}%

## Detailed Results

${results.map(result => `
### ${result.name}

- **Status:** ${result.status ? 'PASSED' : 'FAILED'}
- **Duration:** ${result.duration}ms
- **Coverage:** ${result.coverage || 'N/A'}
- **Command:** \`${result.command}\`

${result.error ? `**Error:** ${result.error}` : ''}
`).join('\n')}

## Recommendations

${results.filter(r => !r.status).length > 0 ? `
### Failed Tests
- Review and fix failing tests
- Check test environment setup
- Verify test data and mocks
` : `
### All Tests Passed! 🎉
- Consider adding more test coverage
- Review performance metrics
- Update test documentation
`}

---
*Generated by test-all.js script*
`

  fs.writeFileSync(reportPath, report)
  log(`\n${colors.green}📊 Test report generated: ${reportPath}${colors.reset}`)
}

async function main() {
  log(`${colors.bright}${colors.blue}🧪 Running Comprehensive Test Suite${colors.reset}`)
  log(`${colors.blue}===========================================${colors.reset}`)

  const startTime = Date.now()
  const results = []

  // Check if required files exist
  const requiredFiles = [
    'jest.config.js',
    'playwright.config.ts',
    'package.json'
  ]

  log(`\n${colors.yellow}🔍 Checking required files...${colors.reset}`)
  for (const file of requiredFiles) {
    if (checkFileExists(file)) {
      log(`${colors.green}✅ Found: ${file}${colors.reset}`)
    } else {
      log(`${colors.red}❌ Missing: ${file}${colors.reset}`)
      log(`${colors.red}Please ensure all required files are present.${colors.reset}`)
      process.exit(1)
    }
  }

  // 1. Linting Tests
  const lintStart = Date.now()
  const lintSuccess = runCommand(
    'npm run lint',
    'Code Linting'
  )
  results.push({
    name: 'Linting',
    status: lintSuccess,
    duration: Date.now() - lintStart,
    command: 'npm run lint'
  })

  // 2. Type Checking
  const typeStart = Date.now()
  const typeSuccess = runCommand(
    'npm run type-check',
    'TypeScript Type Checking'
  )
  results.push({
    name: 'Type Checking',
    status: typeSuccess,
    duration: Date.now() - typeStart,
    command: 'npm run type-check'
  })

  // 3. Unit Tests
  const unitStart = Date.now()
  const unitSuccess = runCommand(
    'npm run test:unit',
    'Unit Tests'
  )
  results.push({
    name: 'Unit Tests',
    status: unitSuccess,
    duration: Date.now() - unitStart,
    command: 'npm run test:unit'
  })

  // 4. Integration Tests
  const integrationStart = Date.now()
  const integrationSuccess = runCommand(
    'npm run test:integration',
    'Integration Tests'
  )
  results.push({
    name: 'Integration Tests',
    status: integrationSuccess,
    duration: Date.now() - integrationStart,
    command: 'npm run test:integration'
  })

  // 5. End-to-End Tests
  const e2eStart = Date.now()
  const e2eSuccess = runCommand(
    'npm run test:e2e',
    'End-to-End Tests'
  )
  results.push({
    name: 'E2E Tests',
    status: e2eSuccess,
    duration: Date.now() - e2eStart,
    command: 'npm run test:e2e'
  })

  // 6. Accessibility Tests
  const a11yStart = Date.now()
  const a11ySuccess = runCommand(
    'npm run test:a11y',
    'Accessibility Tests'
  )
  results.push({
    name: 'Accessibility Tests',
    status: a11ySuccess,
    duration: Date.now() - a11yStart,
    command: 'npm run test:a11y'
  })

  // 7. Performance Tests
  const perfStart = Date.now()
  const perfSuccess = runCommand(
    'npm run test:performance',
    'Performance Tests'
  )
  results.push({
    name: 'Performance Tests',
    status: perfSuccess,
    duration: Date.now() - perfStart,
    command: 'npm run test:performance'
  })

  // 8. Security Tests
  const securityStart = Date.now()
  const securitySuccess = runCommand(
    'npm audit',
    'Security Audit'
  )
  results.push({
    name: 'Security Audit',
    status: securitySuccess,
    duration: Date.now() - securityStart,
    command: 'npm audit'
  })

  // 9. Build Test
  const buildStart = Date.now()
  const buildSuccess = runCommand(
    'npm run build',
    'Production Build Test'
  )
  results.push({
    name: 'Build Test',
    status: buildSuccess,
    duration: Date.now() - buildStart,
    command: 'npm run build'
  })

  // Generate summary
  const totalDuration = Date.now() - startTime
  const passedTests = results.filter(r => r.status).length
  const failedTests = results.filter(r => !r.status).length

  log(`\n${colors.blue}===========================================${colors.reset}`)
  log(`${colors.bright}📊 Test Suite Summary${colors.reset}`)
  log(`${colors.blue}===========================================${colors.reset}`)
  log(`Total Duration: ${totalDuration}ms`)
  log(`Tests Passed: ${colors.green}${passedTests}${colors.reset}`)
  log(`Tests Failed: ${colors.red}${failedTests}${colors.reset}`)
  log(`Success Rate: ${colors.bright}${Math.round((passedTests / results.length) * 100)}%${colors.reset}`)

  // Generate detailed report
  generateTestReport(results)

  // Exit with appropriate code
  if (failedTests > 0) {
    log(`\n${colors.red}❌ Some tests failed. Please review the results.${colors.reset}`)
    process.exit(1)
  } else {
    log(`\n${colors.green}🎉 All tests passed successfully!${colors.reset}`)
    process.exit(0)
  }
}

// Handle uncaught errors
process.on('uncaughtException', (error) => {
  log(`${colors.red}❌ Uncaught Exception: ${error.message}${colors.reset}`)
  process.exit(1)
})

process.on('unhandledRejection', (reason) => {
  log(`${colors.red}❌ Unhandled Rejection: ${reason}${colors.reset}`)
  process.exit(1)
})

// Run the test suite
main().catch((error) => {
  log(`${colors.red}❌ Test suite failed: ${error.message}${colors.reset}`)
  process.exit(1)
})
