// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  role          String    @default("USER") // USER, ADMIN, SUPER_ADMIN
  status        String    @default("ACTIVE") // ACTIVE, INACTIVE, PENDING_VERIFICATION, SUSPENDED
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  profile       UserProfile?
  bots          Bot[]
  conversations Conversation[]
  apiKeys       ApiKey[]
  webhooks      Webhook[]
  notifications Notification[]
  broadcasts    Broadcast[]
  segments      Segment[]
  polls         Poll[]
  agents        Agent[]
  triggers      Trigger[]
  flows         Flow[]

  @@map("users")
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String?
  lastName    String?
  company     String?
  phone       String?
  timezone    String   @default("UTC")
  language    String   @default("en")
  preferences String?  // JSON as String for SQLite
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model Bot {
  id        String   @id @default(cuid())
  name      String
  status    String   @default("DRAFT") // DRAFT, ACTIVE, PAUSED, ARCHIVED
  settings  String?  // JSON as String for SQLite
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@map("bots")
}

model Conversation {
  id        String   @id @default(cuid())
  botId     String
  userId    String
  status    String   @default("ACTIVE") // ACTIVE, PAUSED, ENDED
  metadata  String?  // JSON as String for SQLite
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bot      Bot       @relation(fields: [botId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // USER, ASSISTANT, SYSTEM
  content        String
  metadata       String?  // JSON as String for SQLite
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  permissions String   // JSON as String for SQLite
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Webhook {
  id        String   @id @default(cuid())
  name      String
  url       String
  events    String   // JSON as String for SQLite
  secret    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // INFO, WARNING, ERROR, SUCCESS
  title     String
  message   String
  metadata  String?  // JSON as String for SQLite
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Broadcast {
  id          String   @id @default(cuid())
  name        String
  type        String   // IMMEDIATE, SCHEDULED
  status      String   @default("DRAFT") // DRAFT, SCHEDULED, SENDING, SENT, FAILED
  content     String
  scheduledAt DateTime?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipients  BroadcastRecipient[]
  analytics   BroadcastAnalytics?

  @@map("broadcasts")
}

model BroadcastRecipient {
  id         String   @id @default(cuid())
  broadcastId String
  userId     String
  status     String   @default("PENDING") // PENDING, SENT, DELIVERED, READ, FAILED
  sentAt     DateTime?
  readAt     DateTime?
  createdAt  DateTime @default(now())

  broadcast Broadcast @relation(fields: [broadcastId], references: [id], onDelete: Cascade)

  @@map("broadcast_recipients")
}

model BroadcastAnalytics {
  id          String   @id @default(cuid())
  broadcastId String   @unique
  totalSent   Int      @default(0)
  delivered   Int      @default(0)
  read        Int      @default(0)
  failed      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  broadcast Broadcast @relation(fields: [broadcastId], references: [id], onDelete: Cascade)

  @@map("broadcast_analytics")
}

model Segment {
  id        String   @id @default(cuid())
  name      String
  criteria  String   // JSON as String for SQLite
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("segments")
}

model Poll {
  id        String   @id @default(cuid())
  title     String
  question  String
  type      String   // SINGLE_CHOICE, MULTIPLE_CHOICE, TEXT, RATING
  options   String   // JSON as String for SQLite
  status    String   @default("DRAFT") // DRAFT, ACTIVE, PAUSED, COMPLETED
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses PollResponse[]

  @@map("polls")
}

model PollResponse {
  id        String   @id @default(cuid())
  pollId    String
  userId    String
  answer    String   // JSON as String for SQLite
  createdAt DateTime @default(now())

  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@map("poll_responses")
}

model Agent {
  id        String   @id @default(cuid())
  name      String
  email     String
  status    String   @default("OFFLINE") // ONLINE, OFFLINE, BUSY, AWAY
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  transfers AgentTransfer[]

  @@map("agents")
}

model AgentTransfer {
  id        String   @id @default(cuid())
  agentId   String
  userId    String
  status    String   @default("PENDING") // PENDING, ACCEPTED, IN_PROGRESS, COMPLETED, REJECTED
  metadata  String?  // JSON as String for SQLite
  createdAt DateTime @default(now())

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_transfers")
}

model Trigger {
  id         String   @id @default(cuid())
  name       String
  type       String   // KEYWORD, INTENT, ENTITY, TIME, EVENT
  conditions String   // JSON as String for SQLite
  actions    String   // JSON as String for SQLite
  isActive   Boolean  @default(true)
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  actions TriggerAction[]

  @@map("triggers")
}

model TriggerAction {
  id        String   @id @default(cuid())
  triggerId String
  type      String   // SEND_MESSAGE, TRANSFER_AGENT, TAG_USER, UPDATE_PROFILE, TRIGGER_WEBHOOK
  config    String   // JSON as String for SQLite
  createdAt DateTime @default(now())

  trigger Trigger @relation(fields: [triggerId], references: [id], onDelete: Cascade)

  @@map("trigger_actions")
}

model Flow {
  id          String   @id @default(cuid())
  name        String
  description String?
  nodes       String   // JSON as String for SQLite
  edges       String   // JSON as String for SQLite
  status      String   @default("DRAFT") // DRAFT, ACTIVE, PAUSED, IN_PROGRESS, COMPLETED, REJECTED
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  executions FlowExecution[]

  @@map("flows")
}

model FlowExecution {
  id        String   @id @default(cuid())
  flowId    String
  status    String
  metadata  String?  // JSON as String for SQLite
  createdAt DateTime @default(now())

  flow Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@map("flow_executions")
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("email_verifications")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("password_resets")
}
