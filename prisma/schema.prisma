// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ---------- MODELS DE BAZÄ‚ ----------

model User {
  id             String      @id @default(cuid())
  email          String      @unique
  password       String
  name           String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  roleId         String
  role           Role        @relation(fields: [roleId], references: [id])
  workspaces     WorkspaceMember[]
  sessions       Session[]
  auditLogs      AuditLog[]

  @@map("users")
}

model Session {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  token       String   @unique
  ip          String?
  userAgent   String?
  createdAt   DateTime @default(now())
  expiresAt   DateTime

  @@map("sessions")
}

// ---------- RBAC (Roles + Permissions) ----------

model Role {
  id          String        @id @default(cuid())
  name        String        @unique   // root, superadmin, owner, manager, agent, viewer
  description String?
  level       Int           // 100 = root, 90 = superadmin, 80 = owner, etc.
  permissions Permission[]  @relation("RolePermissions")
  users       User[]
  isSystem    Boolean       @default(false) // System roles cannot be deleted

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  key         String   @unique  // ex: can_manage_users, can_edit_bots
  name        String
  description String?
  category    String   // System Management, User Management, etc.
  roles       Role[]   @relation("RolePermissions")

  @@map("permissions")
}

// ---------- WORKSPACES & MEMBERS ----------

model Workspace {
  id          String             @id @default(cuid())
  name        String
  planId      String
  plan        Plan               @relation(fields: [planId], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  members     WorkspaceMember[]
  bots        Bot[]
  conversations Conversation[]

  @@map("workspaces")
}

model WorkspaceMember {
  id           String     @id @default(cuid())
  userId       String
  workspaceId  String
  role         WorkspaceRole @default(AGENT)
  user         User       @relation(fields: [userId], references: [id])
  workspace    Workspace  @relation(fields: [workspaceId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MANAGER
  AGENT
  VIEWER
  GUEST
}

// ---------- PLANS / TIERS ----------

model Plan {
  id          String        @id @default(cuid())
  name        String        @unique    // starter, pro, enterprise
  displayName String
  description String?
  price       Int           // Price in cents
  currency    String        @default("USD")
  interval    String        @default("month") // month, year
  features    Json          // JSON cu feature flags
  limits      Json          // JSON cu limite (bots_limit, users_limit, etc.)
  workspaces  Workspace[]
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("plans")
}

// ---------- BOTS / CANALE ----------

model Bot {
  id            String      @id @default(cuid())
  name          String
  platform      Platform
  workspaceId   String
  workspace     Workspace   @relation(fields: [workspaceId], references: [id])
  config        Json        // parametri specifici platformei
  status        BotStatus   @default(DRAFT)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  conversations Conversation[]

  @@map("bots")
}

enum Platform {
  WHATSAPP
  FACEBOOK_MESSENGER
  INSTAGRAM
  WEB_CHAT
  TELEGRAM
  EMAIL
  SMS
}

enum BotStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

// ---------- CONVERSATIONS ----------

model Conversation {
  id          String   @id @default(cuid())
  workspaceId String
  botId       String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  bot         Bot?      @relation(fields: [botId], references: [id])
  platform    Platform
  status      ConversationStatus @default(ACTIVE)
  metadata    Json?    // Additional platform-specific data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messages    Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  content        String
  role           MessageRole
  metadata       Json?
  createdAt      DateTime @default(now())

  @@map("messages")
}

enum ConversationStatus {
  ACTIVE
  PAUSED
  ENDED
  ARCHIVED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

// ---------- AUDIT LOGS (extra recomandat) ----------

model AuditLog {
  id          String    @id @default(cuid())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  action      String    // CREATE_USER, DELETE_BOT, etc.
  resource    String    // user, bot, workspace, etc.
  resourceId  String?   // ID of the affected resource
  metadata    Json?     // Additional context data
  ip          String?
  userAgent   String?
  createdAt   DateTime  @default(now())

  @@map("audit_logs")
}

// ---------- FEATURE FLAGS ----------

model FeatureFlag {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("feature_flags")
}

// ---------- API KEYS ----------

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  workspaceId String?
  permissions Json?    // Array of permissions
  lastUsed    DateTime?
  expiresAt   DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("api_keys")
}

// ---------- WEBHOOKS ----------

model Webhook {
  id          String   @id @default(cuid())
  name        String
  url         String
  workspaceId String?
  events      Json     // Array of events to listen for
  secret      String?
  isActive    Boolean  @default(true)
  lastTriggered DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("webhooks")
}

// ---------- NOTIFICATIONS ----------

model Notification {
  id        String   @id @default(cuid())
  userId    String?
  title     String
  message   String
  type      NotificationType
  read      Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

// ---------- KNOWLEDGE BASE ----------

model KnowledgeBase {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     String
  tags        Json?    // Array of tags
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("knowledge_base")
}

// ---------- BROADCASTS ----------

model Broadcast {
  id          String   @id @default(cuid())
  name        String
  message     String
  workspaceId String?
  status      BroadcastStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("broadcasts")
}

enum BroadcastStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
  CANCELLED
}

// ---------- POLLS & SURVEYS ----------

model Poll {
  id          String   @id @default(cuid())
  title       String
  description String?
  options     Json     // Array of poll options
  type        PollType
  status      PollStatus @default(DRAFT)
  workspaceId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("polls")
}

enum PollType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TEXT
  RATING
}

enum PollStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

// ---------- AUTOMATION & TRIGGERS ----------

model Trigger {
  id          String   @id @default(cuid())
  name        String
  type        TriggerType
  conditions  Json     // Trigger conditions
  actions     Json     // Actions to perform
  isActive    Boolean  @default(true)
  workspaceId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("triggers")
}

enum TriggerType {
  KEYWORD
  INTENT
  ENTITY
  TIME
  EVENT
  WEBHOOK
}

// ---------- FLOWS ----------

model Flow {
  id          String   @id @default(cuid())
  name        String
  description String?
  nodes       Json     // Flow nodes configuration
  edges       Json     // Flow edges configuration
  status      FlowStatus @default(DRAFT)
  workspaceId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("flows")
}

enum FlowStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
}

// ---------- INTEGRATIONS ----------

model Integration {
  id          String   @id @default(cuid())
  name        String
  type        String   // whatsapp, instagram, etc.
  config      Json     // Integration-specific configuration
  workspaceId String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("integrations")
}

// ---------- ANALYTICS ----------

model Analytics {
  id          String   @id @default(cuid())
  workspaceId String?
  metric      String   // conversations_count, messages_sent, etc.
  value       Float
  date        DateTime
  metadata    Json?
  createdAt   DateTime @default(now())

  @@map("analytics")
}

// ---------- BILLING ----------

model BillingInfo {
  id          String   @id @default(cuid())
  workspaceId String   @unique
  customerId  String?  // Stripe customer ID
  subscriptionId String? // Stripe subscription ID
  planId      String
  status      BillingStatus @default(ACTIVE)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("billing_info")
}

enum BillingStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
}

// ---------- TEAM MANAGEMENT ----------

model TeamInvite {
  id          String   @id @default(cuid())
  email       String
  workspaceId String
  role        WorkspaceRole
  token       String   @unique
  expiresAt   DateTime
  acceptedAt  DateTime?
  createdAt   DateTime @default(now())

  @@unique([email, workspaceId])
  @@map("team_invites")
}