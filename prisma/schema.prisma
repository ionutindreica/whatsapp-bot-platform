// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  role      UserRole @default(USER)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts     Account[]
  sessions     Session[]
  bots         Bot[]
  conversations Conversation[]
  teamMemberships TeamMember[]
  billingInfo  BillingInfo?
  usageStats   UsageStats[]
  apiKeys      ApiKey[]
  webhooks     Webhook[]
  notifications Notification[]
  knowledgeBase KnowledgeBase[]
  // New relations
  userTags     UserTag[]
  broadcastRecipients BroadcastRecipient[]
  pollResponses PollResponse[]
  agent        Agent?
  flowExecutions FlowExecution[]
  profile      UserProfile?
  adminActions AdminAction[]
  targetActions AdminAction[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Bot Management
model Bot {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      BotStatus @default(INACTIVE)
  phoneNumber String?
  personality String?
  welcomeMessage String?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId        String
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  trainingData  TrainingData[]
  integrations  BotIntegration[]
  analytics     BotAnalytics[]
  // New relations
  broadcasts    Broadcast[]
  tags          Tag[]
  segments      Segment[]
  polls         Poll[]
  messageTemplates MessageTemplate[]
  triggers      Trigger[]
  flows         Flow[]
  instagramAccounts InstagramAccount[]

  @@map("bots")
}

// Conversation Management
model Conversation {
  id        String   @id @default(cuid())
  botId     String
  userId    String
  status    ConversationStatus @default(ACTIVE)
  startedAt DateTime @default(now())
  endedAt   DateTime?
  metadata  Json?

  // Relations
  bot         Bot @relation(fields: [botId], references: [id], onDelete: Cascade)
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    Message[]
  analytics   ConversationAnalytics?
  agentTransfers AgentTransfer[]

  @@map("conversations")
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  content        String
  role           MessageRole
  timestamp      DateTime    @default(now())
  metadata       Json?
  isRead         Boolean     @default(false)

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// AI Training & Knowledge
model TrainingData {
  id          String   @id @default(cuid())
  botId       String
  type        TrainingDataType
  content     String
  processed   Boolean  @default(false)
  accuracy    Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bot Bot @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@map("training_data")
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  userId      String
  title       String
  type        KnowledgeType
  content     String
  status      KnowledgeStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("knowledge_base")
}

// Team Management
model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members TeamMember[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  role     TeamRole @default(MEMBER)
  status   TeamMemberStatus @default(PENDING)
  joinedAt DateTime @default(now())

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

// Billing & Subscription
model BillingInfo {
  id            String   @id @default(cuid())
  userId        String   @unique
  plan          String
  status        BillingStatus @default(ACTIVE)
  currentPeriod DateTime
  nextBilling   DateTime
  amount        Float
  currency      String   @default("USD")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices Invoice[]

  @@map("billing_info")
}

model Invoice {
  id            String   @id @default(cuid())
  billingInfoId String
  amount        Float
  currency      String   @default("USD")
  status        InvoiceStatus @default(PENDING)
  dueDate       DateTime
  paidAt        DateTime?
  createdAt     DateTime @default(now())

  // Relations
  billingInfo BillingInfo @relation(fields: [billingInfoId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model UsageStats {
  id          String   @id @default(cuid())
  userId      String
  metric      String
  value       Float
  period      String
  recordedAt  DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_stats")
}

// API & Integrations
model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  permissions Json
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Webhook {
  id          String   @id @default(cuid())
  userId      String
  url         String
  events      Json
  secret      String
  status      WebhookStatus @default(ACTIVE)
  lastTriggered DateTime?
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}

model BotIntegration {
  id          String   @id @default(cuid())
  botId       String
  type        IntegrationType
  config      Json
  status      IntegrationStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bot Bot @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@map("bot_integrations")
}

// Analytics
model BotAnalytics {
  id          String   @id @default(cuid())
  botId       String
  metric      String
  value       Float
  period      String
  recordedAt  DateTime @default(now())

  // Relations
  bot Bot @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@map("bot_analytics")
}

model ConversationAnalytics {
  id             String   @id @default(cuid())
  conversationId String   @unique
  duration       Int?
  messageCount   Int
  satisfaction   Float?
  resolution     Boolean?
  recordedAt     DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("conversation_analytics")
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum AdminAction {
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_SUSPENDED
  USER_ACTIVATED
  SUBSCRIPTION_CHANGED
  PAYMENT_PROCESSED
  SYSTEM_CONFIGURED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum BotStatus {
  ACTIVE
  INACTIVE
  PAUSED
  TRAINING
}

enum ConversationStatus {
  ACTIVE
  ENDED
  PAUSED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum TrainingDataType {
  CONVERSATION
  DOCUMENT
  FAQ
  KNOWLEDGE
}

enum KnowledgeType {
  FAQ
  DOCUMENTATION
  ARTICLE
  MANUAL
}

enum KnowledgeStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TeamMemberStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum BillingStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}

enum InvoiceStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum WebhookStatus {
  ACTIVE
  INACTIVE
  FAILED
}

enum IntegrationType {
  WHATSAPP
  WEBSITE
  EMAIL
  SMS
  CRM
  CALENDAR
  INSTAGRAM
  FACEBOOK
  TELEGRAM
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR
}

enum NotificationType {
  SYSTEM
  BILLING
  BOT
  TEAM
  SECURITY
}

// Broadcast & Messaging
model Broadcast {
  id          String   @id @default(cuid())
  botId       String
  title       String
  message     String
  type        BroadcastType
  status      BroadcastStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bot         Bot @relation(fields: [botId], references: [id], onDelete: Cascade)
  recipients  BroadcastRecipient[]
  analytics   BroadcastAnalytics?

  @@map("broadcasts")
}

model BroadcastRecipient {
  id          String   @id @default(cuid())
  broadcastId String
  userId      String
  status      RecipientStatus @default(PENDING)
  sentAt      DateTime?
  deliveredAt DateTime?
  readAt      DateTime?

  // Relations
  broadcast   Broadcast @relation(fields: [broadcastId], references: [id], onDelete: Cascade)
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([broadcastId, userId])
  @@map("broadcast_recipients")
}

model BroadcastAnalytics {
  id          String   @id @default(cuid())
  broadcastId String   @unique
  totalSent   Int      @default(0)
  delivered   Int      @default(0)
  read        Int      @default(0)
  clicked     Int      @default(0)
  responded   Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
  broadcast   Broadcast @relation(fields: [broadcastId], references: [id], onDelete: Cascade)

  @@map("broadcast_analytics")
}

// Segmentation & Tags
model Tag {
  id          String   @id @default(cuid())
  botId       String
  name        String
  color       String   @default("#3B82F6")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bot         Bot @relation(fields: [botId], references: [id], onDelete: Cascade)
  userTags    UserTag[]

  @@unique([botId, name])
  @@map("tags")
}

model UserTag {
  id        String   @id @default(cuid())
  userId    String
  tagId     String
  addedAt   DateTime @default(now())
  addedBy   String?  // Bot ID or User ID who added the tag

  // Relations
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag       Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([userId, tagId])
  @@map("user_tags")
}

model Segment {
  id          String   @id @default(cuid())
  botId       String
  name        String
  description String?
  rules       Json     // Segment rules (conditions)
  userCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bot         Bot @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([botId, name])
  @@map("segments")
}

// Polls & Surveys
model Poll {
  id          String   @id @default(cuid())
  botId       String
  title       String
  question    String
  type        PollType
  options     Json     // Poll options
  status      PollStatus @default(ACTIVE)
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bot         Bot @relation(fields: [botId], references: [id], onDelete: Cascade)
  responses   PollResponse[]

  @@map("polls")
}

model PollResponse {
  id        String   @id @default(cuid())
  pollId    String
  userId    String
  answer    Json     // Selected option(s)
  answeredAt DateTime @default(now())

  // Relations
  poll      Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId])
  @@map("poll_responses")
}

// Live Agent Transfer
model Agent {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  status      AgentStatus @default(OFFLINE)
  maxConcurrent Int    @default(5)
  currentLoad  Int     @default(0)
  specializations Json? // Agent specializations
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  transfers   AgentTransfer[]

  @@map("agents")
}

model AgentTransfer {
  id          String   @id @default(cuid())
  conversationId String
  agentId     String
  reason      String?
  status      TransferStatus @default(PENDING)
  requestedAt DateTime @default(now())
  acceptedAt  DateTime?
  completedAt DateTime?

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  agent       Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_transfers")
}

// Message Templates
model MessageTemplate {
  id          String   @id @default(cuid())
  botId       String
  name        String
  content     String
  variables   Json?    // Template variables
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bot         Bot @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([botId, name])
  @@map("message_templates")
}

// Trigger System & Flow Builder
model Trigger {
  id          String   @id @default(cuid())
  botId       String
  name        String
  description String?
  triggerType TriggerType
  conditions  Json     // Trigger conditions (keywords, patterns, etc.)
  isActive    Boolean  @default(true)
  priority    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bot         Bot @relation(fields: [botId], references: [id], onDelete: Cascade)
  actions     TriggerAction[]

  @@map("triggers")
}

model TriggerAction {
  id        String   @id @default(cuid())
  triggerId String
  actionType ActionType
  config    Json     // Action configuration
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  trigger    Trigger @relation(fields: [triggerId], references: [id], onDelete: Cascade)

  @@map("trigger_actions")
}

model Flow {
  id          String   @id @default(cuid())
  botId       String
  name        String
  description String?
  nodes       Json     // Flow nodes configuration
  connections Json     // Node connections
  isActive    Boolean  @default(true)
  isTemplate  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bot         Bot @relation(fields: [botId], references: [id], onDelete: Cascade)
  executions  FlowExecution[]

  @@map("flows")
}

model FlowExecution {
  id          String   @id @default(cuid())
  flowId      String
  userId      String
  currentNode String?
  status      FlowStatus @default(ACTIVE)
  context     Json?    // Execution context/variables
  startedAt   DateTime @default(now())
  completedAt DateTime?

  // Relations
  flow        Flow @relation(fields: [flowId], references: [id], onDelete: Cascade)
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("flow_executions")
}

// Instagram Integration
model InstagramAccount {
  id              String   @id @default(cuid())
  botId           String
  accountId       String   @unique
  username        String
  accessToken     String
  refreshToken    String?
  tokenExpiresAt  DateTime?
  permissions     Json     // Instagram permissions
  isActive        Boolean  @default(true)
  lastSyncAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  bot             Bot @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@map("instagram_accounts")
}

// SuperAdmin Management
model AdminAction {
  id          String     @id @default(cuid())
  adminId     String
  targetUserId String?
  action      AdminAction
  description String?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime   @default(now())

  admin       User       @relation(fields: [adminId], references: [id], onDelete: Cascade)
  targetUser  User?      @relation(fields: [targetUserId], references: [id], onDelete: SetNull)

  @@map("admin_actions")
}

model SystemSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  updatedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model AdminDashboard {
  id        String   @id @default(cuid())
  adminId   String
  widgets   Json
  layout    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_dashboards")
}

// Additional Enums for Triggers and Flows
enum TriggerType {
  KEYWORD
  PHRASE
  REGEX
  INTENT
  ENTITY
  SENTIMENT
  TIME_BASED
  USER_ATTRIBUTE
  CONVERSATION_STATE
}

enum ActionType {
  SEND_MESSAGE
  SEND_TEMPLATE
  SET_VARIABLE
  ADD_TAG
  REMOVE_TAG
  TRIGGER_FLOW
  TRANSFER_AGENT
  SCHEDULE_MESSAGE
  WEBHOOK
  CONDITION
  DELAY
  RANDOM
}

enum FlowStatus {
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
}

// Additional Enums
enum BroadcastType {
  IMMEDIATE
  SCHEDULED
  RECURRING
}

enum BroadcastStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  FAILED
}

enum RecipientStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum PollType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  RATING
  TEXT
}

enum PollStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum AgentStatus {
  ONLINE
  OFFLINE
  BUSY
  AWAY
}

enum TransferStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  REJECTED
}

// Email Verification Models
model EmailVerification {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("email_verifications")
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("password_resets")
}

model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String?
  lastName    String?
  company     String?
  phone       String?
  timezone    String   @default("UTC")
  language    String   @default("en")
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}