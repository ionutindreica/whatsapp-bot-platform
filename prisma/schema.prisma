// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with RBAC
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  role          UserRole  @default(CLIENT)
  status        UserStatus @default(PENDING_VERIFICATION)
  planTier      PlanTier  @default(STARTER)
  workspaceId   String?
  permissions   String[]  @default([])
  features      String[]  @default([])
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret String?
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  workspace     Workspace? @relation(fields: [workspaceId], references: [id])
  sessions      Session[]
  auditLogs     AuditLog[]
  apiKeys       ApiKey[]
  bots          Bot[]
  conversations Conversation[]

  @@map("users")
}

// Session management
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Workspace/Organization model
model Workspace {
  id          String   @id @default(cuid())
  name        String
  domain      String?
  planTier    PlanTier @default(STARTER)
  status      WorkspaceStatus @default(ACTIVE)
  settings    Json     @default("{}")
  limits      Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  bots        Bot[]
  apiKeys     ApiKey[]
  webhooks    Webhook[]
  conversations Conversation[]
  auditLogs   AuditLog[]

  @@map("workspaces")
}

// Role-based access control
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[] @default([])
  features    String[] @default([])
  level       Int      @default(1)
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
}

// Bot management
model Bot {
  id          String   @id @default(cuid())
  name        String
  description String?
  platform    Platform
  status      BotStatus @default(INACTIVE)
  settings    Json     @default("{}")
  flows       Json     @default("[]")
  userId      String
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id])
  workspace     Workspace      @relation(fields: [workspaceId], references: [id])
  conversations Conversation[]

  @@map("bots")
}

// Conversation tracking
model Conversation {
  id          String   @id @default(cuid())
  botId       String
  userId      String
  workspaceId String
  platform    Platform
  status      ConversationStatus @default(ACTIVE)
  metadata    Json     @default("{}")
  startedAt   DateTime @default(now())
  endedAt     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User           @relation(fields: [userId], references: [id])
  workspace   Workspace      @relation(fields: [workspaceId], references: [id])
  bot         Bot            @relation(fields: [botId], references: [id])
  messages    Message[]

  @@map("conversations")
}

// Message storage
model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String
  metadata       Json     @default("{}")
  timestamp      DateTime @default(now())

  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// API Key management
model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  permissions String[] @default([])
  status      ApiKeyStatus @default(ACTIVE)
  usage       Json     @default("{}")
  userId      String?
  workspaceId String?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User?      @relation(fields: [userId], references: [id])
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  @@map("api_keys")
}

// Webhook management
model Webhook {
  id          String   @id @default(cuid())
  name        String
  url         String
  events      String[] @default([])
  status      WebhookStatus @default(ACTIVE)
  secret      String?
  retryCount  Int      @default(3)
  successRate Float    @default(0.0)
  lastTriggered DateTime?
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@map("webhooks")
}

// Audit logging
model AuditLog {
  id          String   @id @default(cuid())
  action      String
  resource    String
  userId      String?
  workspaceId String?
  metadata    Json     @default("{}")
  ip          String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  user        User?      @relation(fields: [userId], references: [id])
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  @@map("audit_logs")
}

// Background job tracking
model Job {
  id          String   @id @default(cuid())
  type        String
  status      JobStatus @default(PENDING)
  payload     Json     @default("{}")
  result      Json?
  error       String?
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  scheduledAt DateTime @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("jobs")
}

// File storage tracking
model File {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  userId      String?
  workspaceId String?
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now())

  @@map("files")
}

// Enums
enum UserRole {
  ROOT_OWNER
  SUPER_ADMIN
  ADMIN
  MANAGER
  AGENT
  VIEWER
  CLIENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  BANNED
}

enum PlanTier {
  STARTER
  PRO
  ENTERPRISE
}

enum WorkspaceStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TRIAL
}

enum Platform {
  WHATSAPP
  MESSENGER
  INSTAGRAM
  WEBSITE
  TELEGRAM
  SLACK
}

enum BotStatus {
  ACTIVE
  INACTIVE
  ERROR
  PAUSED
}

enum ConversationStatus {
  ACTIVE
  ENDED
  TRANSFERRED
  ABANDONED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum ApiKeyStatus {
  ACTIVE
  INACTIVE
  REVOKED
}

enum WebhookStatus {
  ACTIVE
  INACTIVE
  ERROR
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}