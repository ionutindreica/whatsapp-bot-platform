# Minimal MVP Docker Compose
# Runs all services locally for development

version: "3.9"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: aiapp
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d aiapp"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: ../apps/backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://app:secret@postgres:5432/aiapp
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    volumes:
      - ../apps/backend:/app
      - /app/node_modules
    command: npm run dev

  # LLM Server
  llm-server:
    build:
      context: ../apps/llm-server
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - MODEL_PATH=/app/models/llama-3-4b.gguf
      - TEMPERATURE=0.7
      - MAX_TOKENS=2048
    volumes:
      - ../apps/llm-server:/app
      - /app/node_modules
      - ./models:/app/models
    command: npm run dev

  # Frontend (Next.js)
  frontend:
    build:
      context: ../apps/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:5000
      - NEXT_PUBLIC_LLM_URL=http://localhost:8080
    volumes:
      - ../apps/frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

  # Workers for background tasks
  workers:
    build:
      context: ../apps/workers
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://app:secret@postgres:5432/aiapp
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../apps/workers:/app
      - /app/node_modules
    command: npm run dev

volumes:
  postgres_data:
  qdrant_data:
  redis_data:

networks:
  default:
    name: ai-saas-network
